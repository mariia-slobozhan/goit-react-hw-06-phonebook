{"version":3,"sources":["Components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/PhonebookForm/PhonebookForm.js","redux/contacts/contacts-selectors.js","Components/ContactItem/ContactItem.js","Components/ContactsList/ContactsList.js","Components/Filter/Filter.js","App.js","index.js","Components/PhonebookForm/PhonebookForm.module.css","Components/ContactItem/ContactItem.module.css"],"names":["module","exports","addContact","createAction","contact","payload","id","uuidv4","deleteContact","changeFilter","items","createReducer","state","normalizedContact","name","toLowerCase","some","toast","error","checkContactName","filter","_","combineReducers","persistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","PhonebookForm","useState","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","resetForm","onSubmit","preventDefault","className","s","label","input","type","pattern","title","required","onChange","button","filterValue","getVisiableContacts","allContacts","getContacts","normalizedContacts","includes","ContactItem","useSelector","map","item","tel","onClick","onDeleteContact","ContactList","Filter","App","ReactDOM","render","StrictMode","oading","document","getElementById"],"mappings":"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","file":"static/js/main.845376ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1N48V\",\"input\":\"Filter_input__1BRvc\"};","import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst addContact = createAction(\"contacts/add\", (contact) => {\n  return {\n    payload: {\n      contact,\n      id: uuidv4(),\n    },\n  };\n});\n\nconst deleteContact = createAction(\"contacts/delete\");\n\nconst changeFilter = createAction(\"contscts/changeFilter\");\n\n// const addContact = (contact) => ({\n//   type: types.ADD,\n//   payload: {\n//     contact,\n//     id: uuidv4(),\n//   },\n// });\n\n// const deleteContact = (id) => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n\n// const changeFilter = (value) => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\nexport { addContact, deleteContact, changeFilter };\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, changeFilter } from \"./contacts-actions\";\nimport { toast } from \"react-toastify\";\n\nconst checkContactName = (state, payload) => {\n  const { contact } = payload;\n  const normalizedContact = contact.name.toLowerCase();\n  if (\n    state.some(\n      ({ contact }) => contact.name.toLowerCase() === normalizedContact\n    )\n  ) {\n    toast.error(`${contact.name} is already in contact list`);\n    return state;\n  }\n  return [...state, payload];\n};\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => checkContactName(state, payload),\n  [deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       const { contact } = payload;\n//       const normalizedContact = contact.name.toLowerCase();\n//       if (\n//         state.some(\n//           ({ contact }) => contact.name.toLowerCase() === normalizedContact\n//         )\n//       ) {\n//         toast.error(`${contact.name} is already in contact list`);\n//         return state;\n//       }\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter((contact) => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\nconst persistConfig = {\n  key: \"contacts\",\n  storage,\n  whitelist: [\"items\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === \"development\",\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { addContact } from \"../../redux/contacts/contacts-actions\";\nimport s from \"./PhonebookForm.module.css\";\n\nexport default function PhonebookForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const addNewContact = (contact) => dispatch(addContact(contact));\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addNewContact({ name, number });\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   addNewContact: (contact) => dispatch(addContact(contact)),\n// });\n\n// export default connect(null, mapDispatchToProps)(PhonebookForm);\n\nPhonebookForm.propTypes = {\n  addNewContact: PropTypes.func,\n};\n","export const filterValue = (state) => state.contacts.filter;\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getVisiableContacts = (state) => {\n  const allContacts = getContacts(state);\n  const filter = filterValue(state);\n\n  const normalizedContacts = filter.toLowerCase();\n  return allContacts.filter(({ contact }) =>\n    contact.name.toLowerCase().includes(normalizedContacts)\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contacts-actions\";\nimport { getVisiableContacts } from \"../../redux/contacts/contacts-selectors\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactItem.module.css\";\n\nexport default function ContactItem() {\n  const items = useSelector(getVisiableContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = (id) => dispatch(deleteContact(id));\n\n  return items.map(({ contact, id }) => (\n    <li className={s.item} key={id} id={id}>\n      <span className={s.name}>{contact.name}</span>\n      <span className={s.tel}>{contact.number}</span>\n      <button\n        className={s.button}\n        onClick={() => onDeleteContact(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  ));\n}\n\n// const getVisiableContacts = (allContacts, filter) => {\n//   const normalizedContacts = filter.toLowerCase();\n//   return allContacts.filter(({ contact }) =>\n//     contact.name.toLowerCase().includes(normalizedContacts)\n//   );\n// };\n\n// const mapStateToProps = (state) => {\n//   const {items, filter} = state.contacts\n//   const visiableContacts =  getVisiableContacts(items, filter)\n//   return {\n//     items: visiableContacts\n//   }\n// }\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   items: getVisiableContacts(items, filter),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onDeleteContact: (id) => dispatch(deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\n\nContactItem.propTypes = {\n  items: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","import React from \"react\";\nimport ContactItem from \"../ContactItem/ContactItem\";\n\nexport default function ContactList() {\n  return (\n    <ul>\n      <ContactItem />\n    </ul>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterValue } from \"../../redux/contacts/contacts-selectors\";\nimport s from \"./Filter.module.css\";\nimport { changeFilter } from \"../../redux/contacts/contacts-actions\";\n\nexport default function Filter() {\n  const value = useSelector(filterValue);\n  const dispatch = useDispatch();\n  const onChange = (e) => dispatch(changeFilter(e.target.value));\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter\n\n// })\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(changeFilter(e.target.value))\n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import \"./App.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"../node_modules/react-toastify/dist/ReactToastify.css\";\nimport PhonebookForm from \"./Components/PhonebookForm/PhonebookForm\";\nimport ContactList from \"./Components/ContactsList/ContactsList\";\nimport Filter from \"./Components/Filter/Filter\";\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ToastContainer />\n      <PhonebookForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate oading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"PhonebookForm_label__3lRxZ\",\"input\":\"PhonebookForm_input__3lrwt\",\"button\":\"PhonebookForm_button__3fbty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__1fZgN\",\"name\":\"ContactItem_name__Ak0wM\",\"tel\":\"ContactItem_tel__EBg2I\",\"button\":\"ContactItem_button__16Jb7\"};"],"sourceRoot":""}